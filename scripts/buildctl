#!/bin/bash
# Set constants
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SCRIPT_NAME=$(basename "${BASH_SOURCE[0]}")
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Global arguments
ARGS=()
ARG_VERBOSE=false

# Function to show usage
show_usage() {
    cat << EOF
Usage: $(basename "$0") <command> [<args>]

Commands:

  -b, --build [tool...]            Build all or a set of tools
  -c, --check [tool...]            Check whether there are updates available
  -l, --list                       List all tools and their status
  -n, --new <tool> <version>       Add a new tool version
  -r, --release                    Create a GitHub release
  -t, --toggle <tool>              Toggle build status
  -u, --update [tool...]           Update all or a set of tools to the latest version
  -h, --help                       Show this help message

Examples:
  $(basename "$0") new mytool 1.0.0
  $(basename "$0") ls
  $(basename "$0") toggle mytool
  $(basename "$0") build
  $(basename "$0") build mytool

EOF
}

# Function to process arguments
preprocess_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -v|--verbose|verbose)
                ARG_VERBOSE=true
                ;;
            *)
                ARGS+=("$1")
                ;;
        esac
        shift
    done
}

# Preprocess the arguments
preprocess_args "$@"
set -- "${ARGS[@]}"

# Main script logic
case "$1" in
    build | -b | --build)
        shift
        "$SCRIPT_DIR/commands/build.sh" "${@}"
        ;;
    check | -c | --check)
        shift
        "$SCRIPT_DIR/commands/check.sh" "${@}"
        ;;
    debug | -d | --debug)
        "$SCRIPT_DIR/commands/debug.sh" "${ARG_VERBOSE}"
        ;;
    ls | list | -l | --list)
        "$SCRIPT_DIR/commands/list.sh" "$2" "${ARG_VERBOSE}"
        ;;
    new | -n | --new)
       "$SCRIPT_DIR/commands/new.sh" "$2" "$3"
       ;;
    release | -r | --release)
        shift
        "$SCRIPT_DIR/commands/release.sh" "${@}"
        ;;
    tgl | toggle | -t | --toggle)
        "$SCRIPT_DIR/commands/toggle.sh" "$2"
        ;;
    update | -u | --update)
        shift
        "$SCRIPT_DIR/commands/update.sh" "${@}"
        ;;
    help | -h | --help)
        show_usage
        ;;
    *)
        if [ -n "$1" ] ; then
            echo "Error: Unknown command '$1'"
        fi
        show_usage
        exit 1
        ;;
esac
